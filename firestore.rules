/**
 * @fileoverview Firestore Security Rules for Controle da Do√ßuras.
 *
 * Core Philosophy:
 * This ruleset enforces a mixed public/private data model. Product and Customer data is publicly readable.
 * Transaction data is private and only accessible to the owning user.
 *
 * Data Structure:
 * - /artifacts/{appId}/users/{userId}/transactions/{transactionId}: User-specific transaction data.
 * - /artifacts/{appId}/products/{productId}: Public product data.
 * - /artifacts/{appId}/customers/{customerId}: Public customer data.
 * - /artifacts/{appId}/product-categories/{categoryId}: Public product category data.
 *
 * Key Security Decisions:
 * - Users can only manage their own transactions.
 * - Listing of users is disallowed.
 * - Public data (Products, Customers, Product Categories) is readable by everyone.
 *
 * Denormalization for Authorization:
 * - The userId field in the Transaction entity is used to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare with the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource, and if the resource exists.
     *              This is important to avoid accidental deletions or updates of non-existent documents.
     * @param {string} userId The user ID to compare with the resource's userId.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user-specific transaction data.
     * @path /artifacts/{appId}/users/{userId}/transactions/{transactionId}
     * @allow (create) User 'user123' can create a transaction with userId 'user123'.
     * @deny (create) User 'user456' cannot create a transaction with userId 'user123'.
     * @allow (update) User 'user123' can update a transaction with userId 'user123'.
     * @deny (update) User 'user456' cannot update a transaction with userId 'user123'.
     * @allow (delete) User 'user123' can delete a transaction with userId 'user123'.
     * @deny (delete) User 'user456' cannot delete a transaction with userId 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /artifacts/{appId}/users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for public product data.
     * @path /artifacts/{appId}/products/{productId}
     * @allow (get) Any user can read product data.
     * @allow (list) Any user can list product data.
     * @deny (create) No one can create product data without specific authorization. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) No one can update product data without specific authorization. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) No one can delete product data without specific authorization. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access but requires owner-based authorization for writes.
     */
    match /artifacts/{appId}/products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for public customer data.
     * @path /artifacts/{appId}/customers/{customerId}
     * @allow (get) Any user can read customer data.
     * @allow (list) Any user can list customer data.
     * @deny (create) No one can create customer data without specific authorization. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) No one can update customer data without specific authorization. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) No one can delete customer data without specific authorization. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access but requires owner-based authorization for writes.
     */
    match /artifacts/{appId}/customers/{customerId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for public product category data.
     * @path /artifacts/{appId}/product-categories/{categoryId}
     * @allow (get) Any user can read product category data.
     * @allow (list) Any user can list product category data.
     * @deny (create) No one can create product category data without specific authorization. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (update) No one can update product category data without specific authorization. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny (delete) No one can delete product category data without specific authorization. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access but requires owner-based authorization for writes.
     */
    match /artifacts/{appId}/product-categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}