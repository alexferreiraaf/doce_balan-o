/**
 * @fileoverview Firestore Security Rules for Controle da Do√ßuras.
 *
 * Core Philosophy:
 * This ruleset enforces a mixed public/private data model. Product and Customer data is publicly readable.
 * Transaction data is private and only accessible to the owning user.
 *
 * Data Structure:
 * - /artifacts/{appId}/users/{userId}/transactions/{transactionId}: Stores private transaction data for each user.
 * - /artifacts/{appId}/products/{productId}: Stores public product data.
 * - /artifacts/{appId}/customers/{customerId}: Stores public customer data.
 * - /artifacts/{appId}/product-categories/{categoryId}: Stores product category data.
 *
 * Key Security Decisions:
 * - Users can only manage their own transaction data.
 * - Products, Customers, and Product Categories are publicly readable, but write access is not yet defined (TODO).
 * - Listing of transactions is allowed only for the owning user.
 *
 * Denormalization for Authorization:
 *  - The `Transaction` entity includes a `userId` field, denormalized from the path, to simplify ownership checks.
 *
 * Structural Segregation:
 *  - Private transaction data is stored in a user-specific subcollection, separate from the public product and customer data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user-specific transaction data.
     * @path /artifacts/{appId}/users/{userId}/transactions/{transactionId}
     * @allow (create) User with ID 'user123' can create a transaction under /artifacts/app123/users/user123/transactions/tx123. The transaction data must have userId=user123.
     * @deny (create) User with ID 'user123' cannot create a transaction under /artifacts/app123/users/user456/transactions/tx123.
     * @allow (get) User with ID 'user123' can read a transaction under /artifacts/app123/users/user123/transactions/tx123.
     * @deny (get) User with ID 'user123' cannot read a transaction under /artifacts/app123/users/user456/transactions/tx123.
     * @allow (update) User with ID 'user123' can update a transaction under /artifacts/app123/users/user123/transactions/tx123.
     * @deny (update) User with ID 'user123' cannot update a transaction under /artifacts/app123/users/user456/transactions/tx123.
     * @allow (delete) User with ID 'user123' can delete a transaction under /artifacts/app123/users/user123/transactions/tx123.
     * @deny (delete) User with ID 'user123' cannot delete a transaction under /artifacts/app123/users/user456/transactions/tx123.
     * @allow (list) User with ID 'user123' can list transactions under /artifacts/app123/users/user123/transactions.
     * @deny (list) User with ID 'user123' cannot list transactions under /artifacts/app123/users/user456/transactions.
     * @principle Enforces document ownership for all operations on transaction data.
     */
    match /artifacts/{appId}/users/{userId}/transactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to product data, but restricts writes.
     * @path /artifacts/{appId}/products/{productId}
     * @allow (get) Any user, signed in or not, can read a product.
     * @allow (list) Any user, signed in or not, can list products.
     * @deny (create) No one can create a product (yet - TODO: Implement admin role).
     * @deny (update) No one can update a product (yet - TODO: Implement admin role).
     * @deny (delete) No one can delete a product (yet - TODO: Implement admin role).
     * @principle Allows public read access while restricting write access.
     */
    match /artifacts/{appId}/products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to customer data, but restricts writes.
     * @path /artifacts/{appId}/customers/{customerId}
     * @allow (get) Any user, signed in or not, can read a customer.
     * @allow (list) Any user, signed in or not, can list customers.
     * @deny (create) No one can create a customer (yet - TODO: Implement admin role).
     * @deny (update) No one can update a customer (yet - TODO: Implement admin role).
     * @deny (delete) No one can delete a customer (yet - TODO: Implement admin role).
     * @principle Allows public read access while restricting write access.
     */
    match /artifacts/{appId}/customers/{customerId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants public read access to product category data, but restricts writes.
     * @path /artifacts/{appId}/product-categories/{categoryId}
     * @allow (get) Any user, signed in or not, can read a product category.
     * @allow (list) Any user, signed in or not, can list product categories.
     * @deny (create) No one can create a product category (yet - TODO: Implement admin role).
     * @deny (update) No one can update a product category (yet - TODO: Implement admin role).
     * @deny (delete) No one can delete a product category (yet - TODO: Implement admin role).
     * @principle Allows public read access while restricting write access.
     */
    match /artifacts/{appId}/product-categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}