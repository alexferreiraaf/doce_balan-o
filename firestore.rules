/**
 * @fileOverview Firestore Security Rules for SweetBalance application.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model, balancing public accessibility with private user data.
 * Products and Customers are publicly readable but not writable by end users. Transactions are strictly user-owned.
 *
 * Data Structure:
 * - /artifacts/{appId}/users/{userId}/transactions/{transactionId}: Stores private transaction data, accessible only to the owning user.
 * - /artifacts/{appId}/products/{productId}: Stores public product data, readable by all, writable by nobody except admins (simulated with `false` for now).
 * - /artifacts/{appId}/customers/{customerId}: Stores public customer data, readable by all, writable by nobody except admins (simulated with `false` for now).
 *
 * Key Security Decisions:
 * - Public read access is granted for /products and /customers.
 * - User listing is disallowed.
 * - Write access to /products and /customers is denied for all users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Enforces that the request is made by the owner of the resource.
     * @param {string} userId - The user ID of the owner.
     * @returns {boolean} True if the request is made by the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Enforces that the request is made by the owner of the existing resource.
     * @param {string} userId - The user ID of the owner.
     * @returns {boolean} True if the request is made by the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines access rules for transaction documents.
     * @path /artifacts/{appId}/users/{userId}/transactions/{transactionId}
     * @allow (create) Authenticated user can create a transaction if the userId matches their auth.uid, and the transaction's userId field also matches.
     * @allow (get, list) Authenticated user can read their own transaction.
     * @allow (update, delete) Authenticated user can update/delete their own transaction if it exists.
     * @deny (create) User tries to create a transaction for another user.
     * @deny (update, delete) User tries to update/delete a transaction that doesn't exist or doesn't belong to them.
     * @principle Enforces document ownership for writes; restricts access to a user's own data tree; validates relational integrity between documents.
     */
    match /artifacts/{appId}/users/{userId}/transactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for product documents.
     * @path /artifacts/{appId}/products/{productId}
     * @allow (get, list) Anyone can read product information.
     * @deny (create, update, delete) No one can create, update, or delete product information.
     * @principle Public read access with owner-only writes (currently disabled).
     */
    match /artifacts/{appId}/products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Only allow admins to write products.
    }

    /**
     * @description Defines access rules for customer documents.
     * @path /artifacts/{appId}/customers/{customerId}
     * @allow (get, list) Anyone can read customer information.
     * @deny (create, update, delete) No one can create, update, or delete customer information.
     * @principle Public read access with owner-only writes (currently disabled).
     */
    match /artifacts/{appId}/customers/{customerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Only allow admins to write customers.
    }
  }
}