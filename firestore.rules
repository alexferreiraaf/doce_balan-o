/**
 * @file Firestore Security Rules for SweetBalance application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access data associated with their own account.
 *
 * Data Structure:
 * All data is nested under /artifacts/{appId}/users/{userId}, which provides a clear hierarchical structure for user-specific data.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Data access is controlled at the path level, with userId being the determining factor.
 * - Only authenticated users can access data, leveraging Firebase Authentication.
 *
 * Authorization Independence:
 * Ownership is determined solely by the document path (artifacts/{appId}/users/{userId}/*). This eliminates dependencies on parent documents and enables atomic batch operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Secure access to transaction documents. Only the owner can read, create, update, or delete their transactions.
     * @path /artifacts/{appId}/users/{userId}/transactions/{transactionId}
     * @allow (create) Signed-in user with userId matching the path can create a transaction.
     * @allow (get, list) Signed-in user with userId matching the path can read their transactions.
     * @deny (create) User attempts to create a transaction for another user.
     * @deny (update, delete) User attempts to update or delete a transaction they don't own.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /artifacts/{appId}/users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to product documents. Only the owner can read, create, update, or delete their products.
     * @path /artifacts/{appId}/users/{userId}/products/{productId}
     * @allow (create) Signed-in user with userId matching the path can create a product.
     * @allow (get, list) Signed-in user with userId matching the path can read their products.
     * @deny (create) User attempts to create a product for another user.
     * @deny (update, delete) User attempts to update or delete a product they don't own.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /artifacts/{appId}/users/{userId}/products/{productId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to customer documents. Only the owner can read, create, update, or delete their customers.
     * @path /artifacts/{appId}/users/{userId}/customers/{customerId}
     * @allow (create) Signed-in user with userId matching the path can create a customer.
     * @allow (get, list) Signed-in user with userId matching the path can read their customers.
     * @deny (create) User attempts to create a customer for another user.
     * @deny (update, delete) User attempts to update or delete a customer they don't own.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /artifacts/{appId}/users/{userId}/customers/{customerId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}