/**
 * @file Firestore Security Rules for SweetBalance App
 * @core_philosophy This ruleset enforces a public-read, owner-write model for products and customers,
 *                  and strict user-ownership for transactions.
 * @data_structure The database is structured with public collections for products and customers
 *                 under /artifacts/{appId}/, and private user subcollections for transactions
 *                 under /artifacts/{appId}/users/{userId}/.
 * @key_security_decisions
 *   - Products and Customers are readable by anyone (including anonymous users).
 *   - Transactions are strictly controlled: only the owner can read or write their own transactions.
 *   - No user listing is allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the transaction documents.
     * @path /artifacts/{appId}/users/{userId}/transactions/{transactionId}
     * @allow (create) - Authenticated user with ID 'user_abc' can create a transaction in /artifacts/app1/users/user_abc/transactions/tx1 if the transaction's userId is 'user_abc'.
     * @allow (get) - Authenticated user with ID 'user_abc' can get a transaction in /artifacts/app1/users/user_abc/transactions/tx1.
     * @allow (list) - Authenticated user with ID 'user_abc' can list transactions in /artifacts/app1/users/user_abc/transactions.
     * @allow (update) - Authenticated user with ID 'user_abc' can update a transaction in /artifacts/app1/users/user_abc/transactions/tx1.
     * @allow (delete) - Authenticated user with ID 'user_abc' can delete a transaction in /artifacts/app1/users/user_abc/transactions/tx1.
     * @deny (create) - Authenticated user with ID 'user_def' cannot create a transaction in /artifacts/app1/users/user_abc/transactions/tx1.
     * @deny (get) - Authenticated user with ID 'user_def' cannot get a transaction in /artifacts/app1/users/user_abc/transactions/tx1.
     * @deny (list) - Authenticated user with ID 'user_def' cannot list transactions in /artifacts/app1/users/user_abc/transactions.
     * @deny (update) - Authenticated user with ID 'user_def' cannot update a transaction in /artifacts/app1/users/user_abc/transactions/tx1.
     * @deny (delete) - Authenticated user with ID 'user_def' cannot delete a transaction in /artifacts/app1/users/user_abc/transactions/tx1.
     * @principle Enforces strict user-ownership for transactions.
     */
    match /artifacts/{appId}/users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the product documents.
     * @path /artifacts/{appId}/products/{productId}
     * @allow (get) - Any user (even anonymous) can read product data.
     * @allow (list) - Any user (even anonymous) can list product data.
     * @deny (create) - No one can create a product without authentication.
     * @deny (update) - No one can update a product without authentication.
     * @deny (delete) - No one can delete a product without authentication.
     * @principle Allows public read access for products with owner-only writes.
     */
    match /artifacts/{appId}/products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn();  // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the customer documents.
     * @path /artifacts/{appId}/customers/{customerId}
     * @allow (get) - Any user (even anonymous) can read customer data.
     * @allow (list) - Any user (even anonymous) can list customer data.
     * @deny (create) - No one can create a customer without authentication.
     * @deny (update) - No one can update a customer without authentication.
     * @deny (delete) - No one can delete a customer without authentication.
     * @principle Allows public read access for customers with owner-only writes.
     */
    match /artifacts/{appId}/customers/{customerId} {
      allow get, list: if true;
      allow create: if isSignedIn();  // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && resource != null;  // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn() && resource != null;  // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}