/**
 * @description This ruleset enforces a strict user-ownership model for all data within the SweetBalance application.
 *              Each user's transactions, products, and customers are stored in separate subcollections under their user ID, ensuring data privacy and security.
 *              The rules are designed to prevent unauthorized access and maintain data integrity.
 * @dataStructure All data is nested under /artifacts/{appId}/users/{userId}/..., providing a clear hierarchical structure.
 * @keySecurityDecisions
 *   - Only authenticated users can access their own data.
 *   - Data access is restricted based on path-based rules, ensuring that users can only access data within their own user ID.
 *   - The rules validate that the userId in the document matches the userId in the path to prevent unauthorized data creation.
 *   - All write operations are protected by authorization checks to prevent unauthorized modification or deletion of data.
 *   - The rules explicitly deny any unauthorized access attempts.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the resource.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Helper function to check if the user is the owner of the resource and the resource exists.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces access control for transaction documents. Only the owner can read, create, update, or delete their own transactions.
     * @path /artifacts/{appId}/users/{userId}/transactions/{transactionId}
     * @allow (create) - User A can create a transaction under /artifacts/sweetapp/users/A/transactions/123 if the transaction's userId field is "A".
     * @allow (read, update, delete) - User A can read, update, or delete a transaction under /artifacts/sweetapp/users/A/transactions/123.
     * @deny (create) - User A cannot create a transaction under /artifacts/sweetapp/users/B/transactions/123, even if the transaction's userId field is "A".
     * @deny (read, update, delete) - User A cannot read, update, or delete a transaction under /artifacts/sweetapp/users/B/transactions/123.
     * @principle Enforces document ownership for all operations.
     */
    match /artifacts/{appId}/users/{userId}/transactions/{transactionId} {
      allow read: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for product documents. Only the owner can read, create, update, or delete their own products.
     * @path /artifacts/{appId}/users/{userId}/products/{productId}
     * @allow (create) - User A can create a product under /artifacts/sweetapp/users/A/products/123 if the product's userId field is "A".
     * @allow (read, update, delete) - User A can read, update, or delete a product under /artifacts/sweetapp/users/A/products/123.
     * @deny (create) - User A cannot create a product under /artifacts/sweetapp/users/B/products/123, even if the product's userId field is "A".
     * @deny (read, update, delete) - User A cannot read, update, or delete a product under /artifacts/sweetapp/users/B/products/123.
     * @principle Enforces document ownership for all operations.
     */
    match /artifacts/{appId}/users/{userId}/products/{productId} {
      allow read: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for customer documents. Only the owner can read, create, update, or delete their own customers.
     * @path /artifacts/{appId}/users/{userId}/customers/{customerId}
     * @allow (create) - User A can create a customer under /artifacts/sweetapp/users/A/customers/123 if the customer's userId field is "A".
     * @allow (read, update, delete) - User A can read, update, or delete a customer under /artifacts/sweetapp/users/A/customers/123.
     * @deny (create) - User A cannot create a customer under /artifacts/sweetapp/users/B/customers/123, even if the customer's userId field is "A".
     * @deny (read, update, delete) - User A cannot read, update, or delete a customer under /artifacts/sweetapp/users/B/customers/123.
     * @principle Enforces document ownership for all operations.
     */
    match /artifacts/{appId}/users/{userId}/customers/{customerId} {
      allow read: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}