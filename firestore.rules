/**
 * @fileoverview Firestore Security Rules for Controle da Do√ßuras.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership for private data (transactions)
 * and public read access with owner-only writes for shared data (products, customers, product categories).
 *
 * Data Structure:
 * - /artifacts/{appId}/users/{userId}/transactions/{transactionId}: Private transactions, accessible only to the owning user.
 * - /artifacts/{appId}/products/{productId}: Public products, readable by all, writable by authorized users (no ownership defined in schema).
 * - /artifacts/{appId}/customers/{customerId}: Public customers, readable by all, writable by authorized users (no ownership defined in schema).
 * - /artifacts/{appId}/product-categories/{categoryId}: Public product categories, readable by all, writable by authorized users (no ownership defined in schema).
 *
 * Key Security Decisions:
 * - Listing of user documents is disallowed.
 * - Public read access is granted to the `products`, `customers`, and `product-categories` collections.
 * - Write access to public collections is not owner-controlled since the entities do not define an ownership field.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that only the owner can read, create, update, or delete their own transactions.
     * @path /artifacts/{appId}/users/{userId}/transactions/{transactionId}
     * @allow (create) User I7HKJVmF4uRDL75dQShPmHVi4333 can create a transaction under /artifacts/docuras-da-fran-default/users/I7HKJVmF4uRDL75dQShPmHVi4333/transactions/transaction1 if request.auth.uid == userId.
     * @deny (create) User anotherUser cannot create a transaction under /artifacts/docuras-da-fran-default/users/I7HKJVmF4uRDL75dQShPmHVi4333/transactions/transaction1 because request.auth.uid != userId.
     * @principle Enforces document ownership for all operations.
     */
    match /artifacts/{appId}/users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public reading of products, but restricts creation, updates, and deletion.
     * @path /artifacts/{appId}/products/{productId}
     * @allow (get) Any user can read a product.
     * @deny (create) No user can create a product, as the rule is set to false.
     * @principle Allows public read access while restricting write access.
     */
    match /artifacts/{appId}/products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // Only signed in users can create
      allow update: if false; // No updates allowed for now.
      allow delete: if false; // No deletes allowed for now.
    }

    /**
     * @description Allows public reading of customers, but restricts creation, updates, and deletion.
     * @path /artifacts/{appId}/customers/{customerId}
     * @allow (get) Any user can read a customer.
     * @deny (create) No user can create a customer, as the rule is set to false.
     * @principle Allows public read access while restricting write access.
     */
    match /artifacts/{appId}/customers/{customerId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // Only signed in users can create
      allow update: if false; // No updates allowed for now.
      allow delete: if false; // No deletes allowed for now.
    }

    /**
     * @description Allows public reading of product categories, but restricts creation, updates, and deletion.
     * @path /artifacts/{appId}/product-categories/{categoryId}
     * @allow (get) Any user can read a product category.
     * @deny (create) No user can create a product category, as the rule is set to false.
     * @principle Allows public read access while restricting write access.
     */
    match /artifacts/{appId}/product-categories/{categoryId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // Only signed in users can create
      allow update: if false; // No updates allowed for now.
      allow delete: if false; // No deletes allowed for now.
    }
  }
}